grammar Wikitext
  rule document
    element+ {
      def to_s
        elements.collect{|e| e.to_s}.join
      end
    }
  end
  
  rule element
    heading / paragraph / paragraph_break / list
  end
  
  rule heading
    heading_line
  end
  
  rule heading_line
    start:heading_delimiter+ body:(!heading_end plain_char)* end:heading_end {
      def to_s
        depth = [start.text_value.length, self.end.text_value.chomp.length].min
        tag = "h#{depth}"
        "<#{tag}>#{body.elements.collect{|e| e.plain_char.to_s}.join.strip}</#{tag}>" + self.end.newline_or_eof.text_value
      end
    }
  end
  
  rule heading_end
    heading_delimiter+ newline_or_eof
  end  
  
  rule paragraph
    (!list_prefix formatted_line)+ {
      def to_s
        '<p>' + elements.collect{|e| e.formatted_line.to_s}.join.chomp + '</p>' + elements.last.formatted_line.newline.text_value
      end
    }
  end
  
  rule formatted_line
    !heading_delimiter chunks:(formatted_string+) newline:(newline_or_eof) {
      def to_s
        chunks.elements.collect{|c| c.to_s}.join.strip + newline.text_value
      end
    }
  end
    
  rule formatted_string
    bold_string / italic_string / link / plain_string
  end
  
  rule bold_string
    start:bold_delimiter body:(italic_string / plain_string)+ end:bold_delimiter {
      def to_s
        '<b>' + body.elements.collect{|e| e.to_s}.join + '</b>'
      end
    }
  end
  
  rule italic_string
    start:italics_delimiter !"'" body:(bold_string / plain_string)+ end:italics_delimiter {
      def to_s
        '<i>' + body.elements.collect{|e| e.to_s}.join + '</i>'
      end
    }
  end
  
  rule link
    internal_link / external_link
  end
  
  rule internal_link
    start:internal_link_prefix body:plain_string end:internal_link_suffix {
      def to_s
        encoded = body.to_s.gsub(' ', '_')
        "<a href='#{encoded}'>#{body}</a>"
      end
    }
  end
  
  rule external_link
    start:external_link_prefix url:url_string title:(' '+ body:plain_string)? end:external_link_suffix {
      def to_s
        text = title.elements ? title.body : url
        "<a href='#{url}'>#{text}</a>"
      end
    }
  end
  
  rule plain_string
    (!delimiter plain_char)+ {
      def to_s
        elements.collect{|e| e.plain_char.to_s}.join
      end
    }
  end
  
  rule paragraph_break
    blank_line {
      def to_s
        text_value
      end
    }
  end
  
  rule list
    list_item+ {
      # TODO: clean up the bad indent in the generated code.  Also maybe clean up the whole routine...
      def to_s
        previous = nil
        result = ''
        elements.each do |e|
          if previous.nil?
            # We're on first element
            (e.depth - 1).downto(0) do |d|
              result << "\n" + e.indent(-d) + "<#{e.list_tag}>"
            end
          else
            if previous.depth > e.depth
              (previous.depth - e.depth).downto(1) do |d|
                ["</li>", "</#{previous.list_tag}>"].each do |s|
                  result << "\n" + (e.indent(d)) + s
                end
              end
              result << "\n" + e.indent + "</li>"
            elsif previous.depth < e.depth
              ((e.depth - previous.depth) - 1).downto(0) do |d|
                result << "\n" + e.indent(-d) + "<#{e.list_tag}>"
              end
            else
              result << "\n" + e.indent + "</li>"
            end
          end
          result << "\n" + e.to_s
          previous = e.clone
        end
        last = elements.last
        0.upto(last.depth - 1) do |d|
          ["</li>", "</#{last.list_tag}>"].each do |s|
            result << "\n" + last.indent(-d) + s
          end
        end
        result << "\n"
      end
    }
  end
  
  rule list_item
    prefix:(list_prefix+) body:(list / formatted_line) {
      def to_s
        <<"EOT".chomp
#{indent}<li>
#{indent}  #{body.to_s.chomp}
EOT
      end
      
      def depth
        prefix.text_value.length
      end
      
      def indent(adjustment = 0)
        '  ' * (depth - 1 + adjustment)
      end
      
      def list_tag
        # TODO: Can we match for the appropriate list delimiter construct directly instead of using a surrogate method?
        case prefix.elements.last.list_type
        when :bulleted
          'ul'
        when :numbered
          'ol'
        end
      end
    }
  end
  
  rule line
    string newline:newline_or_eof {
      def to_s
        string.to_s + newline.text_value
      end
    }
  end
  
  rule blank_line
    "\n"
  end
  
  rule string
    plain_char+ {
      def to_s
        ERB::Util::h text_value
      end
    }
  end

  rule plain_char
    [^\n] {
      def to_s
        ERB::Util::h text_value
      end
    }
  end
  
  rule url_string
    url_char+ {
      def to_s
        text_value
      end
    }
  end
  
  rule url_char
    !([\s] / link_delimiter) . {
      def to_s
        text_value
      end
    }
  end
  
  rule newline_or_eof
    ("\n"?)
  end
  
  rule delimiter
    bold_delimiter / italics_delimiter / link_delimiter
  end
  
  rule bold_delimiter
    "'''"
  end
  
  rule italics_delimiter
    "''"
  end
  
  rule link_delimiter
    link_prefix / link_suffix
  end

  rule link_prefix
    internal_link_prefix / external_link_prefix
  end
  
  rule internal_link_prefix
    '[['
  end
  
  rule external_link_prefix
    '['
  end
  
  rule link_suffix
    internal_link_suffix / external_link_suffix
  end
  
  rule internal_link_suffix
    ']]'
  end
  
  rule external_link_suffix
    ']'
  end
  
  rule heading_delimiter
    '='
  end
  
  rule list_prefix
    bulleted_list_prefix / numbered_list_prefix
  end
  
  rule bulleted_list_prefix
    '*' {
      def list_type
        :bulleted
      end
    }
  end
  
  rule numbered_list_prefix
    '#' {
      def list_type
        :numbered
      end
    }
  end
end